#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass IEEEtran
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
A MATLAB/ROS System for SLAM Algorithm Education
\end_layout

\begin_layout Author
Andrew Willis, David Grobowski, Nelyadi Shetty, James Conrad
\end_layout

\begin_layout Abstract
This article describes a complete platform the leverages the Robot Operating
 System and MATLAB software to provide a novel environment for SLAM algorithm
 development, simulation, prototyping and education.
 The system enables users to validate and evaluate SLAM algorithms written
 in MATLAB using conventional numerical simulation, hardware-in-the-loop
 (HIL) simulation or on real robotic platforms, e.g., the Turlebot Kobuki
 from iCreate, with little to no modification to the MATLAB SLAM code.
 As such, the system represents an important tool for the purpose of prototyping
 and benchmarking SLAM algorithms and also serves as an ideal platform for
 educating students on the theory and practical implementation of SLAM algorithm
s.
 This article describes the structure of the system and describes how the
 system provides heretofore inaccessible levels of educational benefits
 for SLAM algorithm education.
 S
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Simultaneous Localization and Mapping (SLAM) is a classical topic in the
 robotic, navigation, guidance and computer vision community.
 Solutions to this problem seek to exploit geometric sensor measurements
 to simultaneously create a map of the environment around the robot and
 estimate the position the robot within this map.
\end_layout

\begin_layout Section
Related Work
\end_layout

\begin_layout Standard
Find methods to teach SLAM
\end_layout

\begin_layout Standard
OpenSLAM --- C++
\end_layout

\begin_layout Standard
ROS and SLAM --- C++ some python
\end_layout

\begin_layout Standard
Discuss difficulties in teaching these topics in a semester-long robotics
 or (optimal) control course.
\end_layout

\begin_layout Standard
Discuss the unique contributions that the MATLAB/ROS provides.
\end_layout

\begin_layout Standard
MATLAB 
\end_layout

\begin_layout Itemize
high level language, can program entire algorithm in less lines of code
\end_layout

\begin_layout Itemize
students can see a direct relationship between the written code and the
 theoretical equaitons derived/discussed in lecture
\end_layout

\begin_layout Itemize
MATLAB's implementation of the ROS publisher/subscriber interface abstracts
 the producer of sensor readings from the computational model that processes
 the sensed values
\end_layout

\begin_layout Itemize
ROS publisher/subscriber interface requires only a network communication
 link between the sensor data generator and the MATLAB host node
\end_layout

\begin_layout Itemize
Data generator can be from Gazebo on the local host (conventional simulation),
 from a remote host publishing sensor data via HIL simulation (HIL simulation),
 or from be data sensed from a real-life sensor on an actual robot, e.g.,
 the iCreate Kobuki.
\end_layout

\begin_layout Section
Methodology
\end_layout

\begin_layout Standard
Create a collection of MATLAB classes that subscribe to ROS sensor topics
 to which the data generator(s) publish their measurements.
 Block diagram of the overall system.
\end_layout

\begin_layout Subsection
The Map
\end_layout

\begin_layout Standard
In simulation, MATLAB is used to construct a map whose geometry is known
 in both MATLAB and in the simulator, e.g., Gazebo.
 Gazebo is a slave to MATLAB for the purpose of creating the map.
 Here a MATLAB class is responsible for constructing the world by instantiating
 objects (in the form of 3D models) into the Gazebo world.
 These objects are also placed in a 3D world tracked by MATLAB.
 
\end_layout

\begin_layout Subsection
Data Flow
\end_layout

\begin_layout Standard
Give examples of how image data and scan data flow from the data generator
 to MATLAB.
 MATLAB takes in the data and generates observation measurements for the
 SLAM algorithm.
 The algorithm then takes these measurements in and updates/corrects the
 state which includes the robot's localized position and the MAP.
 
\end_layout

\begin_layout Subsubsection
2D Line Scanner example (EKF-SLAM)
\end_layout

\begin_layout Subsubsection
2D Image Sensor example (EKF-SLAM)
\end_layout

\begin_layout Subsubsection
RSSI Sensor exampleRange Only (EKF-RO-SLAM)
\end_layout

\begin_layout Section
Results
\end_layout

\begin_layout Standard
Datasets...
 perform simulation, run on real robot document # lines of code, document
 accuracy
\end_layout

\begin_layout Standard
document latency
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
State the contribution of the paper.
 Provide and overview of the important results discussed in the article.
 Address future work and/or shortcomings of the work in the current state.
 State how the results specifically support the claimed contribution.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "2018_IROS_MATLABandROS"
options "ieeetr"

\end_inset


\end_layout

\end_body
\end_document
