#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass IEEEtran
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
A MATLAB/ROS System for SLAM Algorithm Education
\end_layout

\begin_layout Author
Andrew Willis, David Grabowsky, Nelyadi Samyak Shetty, James Conrad
\end_layout

\begin_layout Abstract
This article describes a complete platform the leverages the Robot Operating
 System and MATLAB software to provide a novel environment for SLAM algorithm
 development, simulation, prototyping and education.
 The system enables users to validate and evaluate SLAM algorithms written
 in MATLAB using conventional numerical simulation, hardware-in-the-loop
 (HIL) simulation or on real robotic platforms, e.g., the Turlebot Kobuki
 from iCreate, with little to no modification to the MATLAB SLAM code.
 As such, the system represents an important tool for the purpose of prototyping
 and benchmarking SLAM algorithms and also serves as an ideal platform for
 educating students on the theory and practical implementation of SLAM algorithm
s.
 This article describes the structure of the system and describes how the
 system provides heretofore inaccessible levels of educational benefits
 for SLAM algorithm education.
 
\backslash

\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Simultaneous Localization and Mapping (SLAM) is a classical topic in the
 robotic, navigation, guidance and computer vision community.
 Solutions to this problem seek to exploit geometric sensor measurements
 to simultaneously create a map of the environment around the robot and
 estimate the position the robot within this map.
\end_layout

\begin_layout Standard
In academia the usefulness of a robust simulation tool cannot be understated.
 The ability to rapidly prototype and evaluate the effectiveness of methods
 and algorithms is of paramount importance to both the classroom and research
 setting.
 With research, developing an efficient tool for simulation can be a time
 consuming and costly process that provides no contribution to the research
 other than test validation.
 Test validation is of course extremely important, but the development of
 a system for such validation is often not the goal of said research.
 In addition, the code used for simulation is often not efficiently scale-able
 or capable of being modified in such a way that it can be rapidly re-purposed
 for real world experimentation.
 A popular option for mitigating the time required for simulation is to
 use pre made data sets.
 Data sets consist of data, such a range measurements or image frames, that
 can be processed without the need for a simulation 
\begin_inset CommandInset citation
LatexCommand cite
key "Mueggler2017"

\end_inset

.
 However, these data-sets are constrained by the by the very fact that they
 are a finite set of data and thus the risk of creating an algorithm that
 is 'fine tunned' for the data set becomes plausible.
 The largest constraint in classroom education is time.
 The typical length of a semester for college on most academic calendars
 in the United States is fifteen weeks long.
 Fifteen weeks is an extremely short amount of time to create a simulation
 software to validate methods especially when the focus of a class is not
 on the creation of simulation software but rather gaining a thorough understand
ing of the methods being used and validating them with said simulation.
 This holds especially true with SLAM.
 SLAM is an broad field covering a variety of topics in robotics such as
 navigation, guidance and computer vision.
 Any course planning to cover SLAM will already be hard pressed to thoroughly
 explain the formulation behind the methods used in solution, such as the
 wide variety of avaiable filtering mtehods.
 However, only explaining the formulation behind methods is unsatisfactory.
 Students should be tested on their ability to understand these methods
 through implementation, simulation, and experimentation.
 The problem is, there is simply not enough time to fully develop the software
 needed to do such simulation in the given the time frame.
 Depending on the environment used to create said simulation, such as C,
 the time required could increase by a large factor.
 
\end_layout

\begin_layout Standard
Thus, the usefulness for a platform that allows for SLAM algorithm development,
 simulation, prototyping, and education can be seen.
 MATLAB offers a prime environment for the development of such a platform
 
\begin_inset CommandInset citation
LatexCommand cite
key "Rossiter2010"

\end_inset

.
 MATLAB is a high level language that can be rapidly understood by anyone
 with a small coding background.
 MATLAB allows for the creation of algorithms in less lines of codes as
 it capable of abstracting many of the otherwise complex function that one
 would see present in low level languages like C 
\begin_inset CommandInset citation
LatexCommand cite
key "Fangohr2004"

\end_inset

.
 One of the largest benefits of MATLAB is the ease of understanding and
 modification it provides.
 In addition the layout of the MATLAB code allows students to easily see
 the relationship between the theory/formulation discussed in class and
 the algorithms being implemented in code.
 Through the Robot Operating System (ROS) 
\begin_inset CommandInset citation
LatexCommand cite
key "Bouchier2013"

\end_inset

 publisher/subscriber interface MATLAB is able to receive sensor measurements
 and send control commands.
 The ROS publisher/subscriber interface works in such a manner that only
 a network communication link between the sensor/robot and MATLAB host is
 required.
 This is extremely important as it allows for simulation and physical experiment
ation to be switched between extremely efficiently as the algorithms used
 can remain largely untouched while only the target of the communication
 must change.
 
\end_layout

\begin_layout Standard
In many cases, the most effective way to develop robotic automation in industrie
s is to integrate the robot into the real process of application.
 A HIL simulator differs from computer simulation as it involves actual
 hardware and is not limited with the software representation of the system.
 In other cases, HIL simulation is more efficient as the students can study
 the behavior of the developed robot the context of the entire application.
 Due to the value it offers both in manufacturing and education, HIL systems
 have found a wide range of applications in aircraft and missile industries[12,
 13], automotive industry [14, 15], motion control, mechanics [16Â±20] and
 finally in the field of robotics; Reported applications of the HIL concept
 in robotics is given in [21, 22], in which the HIL approach is used with
 the incorporation of the actual motion controller into the simulation process
 of a robot arm.
 However, the contribution has been limited to the use of one piece of actual
 hardware, which is the DSP-based controller used in the generation of the
 computer simulation software 
\begin_inset CommandInset citation
LatexCommand cite
key "Temeltas2006,Lal2009"

\end_inset

.
 (SAMYAK, gotta restructure this paragraph, still has random references
 and looks like its from the ref.
 paper)
\end_layout

\begin_layout Standard
The duration of development and testing affects the time as it might be
 relevant in a educational setting for higher level algorithms.
 HIL cannot easily stop-if you pause the hardware-in-the-loop simulator,
 all the components that it's attached to, including the algorithm in your
 system-under-test, keep running.
 We could, of course, put breakpoints or a pause-on-command feature in our
 simulation but that's rather intrusive.
 In addition , labs in giving access to actual experimentation are ultimately
 more effective for the goals of a more hands-on education and research.The
 development of actual robots to implement these algorithms might have have
 practical industry applications but the time and effort put into developing
 low level code and the physical hardware might be unnecessary when used
 in a educational setting.
 In addition to this different algorithms might require different hardware
 such as sensors to implement the application.
 For example visual base SLAM might require a depth based camera while other
 versions of the algorithm might require just a laser scanner.
 However, due to the employment of actual robots and equipment, labs in
 this category ,whether on site or remote, are expensive to set-up, maintain
 and provide with long hours of daily staffing.
 Safety and longevity issues of these costly instruments arise as other
 important points of consideration, particularly when open access is allowed
 to users of a multitude of education, back ground and experience levels.
 
\end_layout

\begin_layout Standard
This paper proposes a fully functional system for rapid protoypting and
 testing of SLAM algorithms.
 The simulation systesm allows for numeric simulation through MATLAB, Gazebo
 simulation via ROS commnuciation, hardware in loop simulation, and physical
 experimentaion with robots via ROS.
 One of the major benifits of this proposed system is the ease by which
 the code can switch from Gazebo simulation to physical experimentation.
 In addition, the implemention of the code via MATLAB allows for the abstraction
 of the majority of the actual simluation.
 This frees researchers and students to focus on implemetning SLAM algorithms
 rather than worrying about creating a simulation enviorment.
 MALAB also makes it very easy to translate mathmatic formulation to code.
 This is extremely vaulable to students as it ensures that time is not wasted
 on leaning the nuiances of a new programming language.
 
\end_layout

\begin_layout Section
Related Work
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
Find methods to teach SLAM
\end_layout

\begin_layout Plain Layout
OpenSLAM â C++
\end_layout

\begin_layout Plain Layout
ROS and SLAM â C++ some python
\end_layout

\begin_layout Plain Layout
Discuss difficulties in teaching these topics in a semester-long robotics
 or (optimal) control course.
\end_layout

\begin_layout Plain Layout
Discuss the unique contributions that the MATLAB/ROS provides.
\end_layout

\begin_layout Plain Layout
MATLAB 
\end_layout

\begin_layout Itemize
high level language, can program entire algorithm in less lines of code
\end_layout

\begin_layout Itemize
students can see a direct relationship between the written code and the
 theoretical equaitons derived/discussed in lecture
\end_layout

\begin_layout Itemize
MATLAB's implementation of the ROS publisher/subscriber interface abstracts
 the producer of sensor readings from the computational model that processes
 the sensed values
\end_layout

\begin_layout Itemize
ROS publisher/subscriber interface requires only a network communication
 link between the sensor data generator and the MATLAB host node
\end_layout

\begin_layout Itemize
Data generator can be from Gazebo on the local host (conventional simulation),
 from a remote host publishing sensor data via HIL simulation (HIL simulation),
 or from be data sensed from a real-life sensor on an actual robot, e.g.,
 the iCreate Kobuki.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the context of education, implementing a SLAM algorithm can be broken
 into two broad problems.
 The first is understanding the algorithm and how it is a solution to the
 SLAM problem.
 The second is implementing that algorithm with code.
 The purpose of most classes is to focus on the first of these problems
 which is understanding how an algorithm solves the SLAM problem.
 The implementation of said algorithms mainly focuses around translating
 the solution equation into an coded algorithm and then being able to observe,
 via simulation or experimentation, the validity of these solutions.
 Therefore, a coding language must be chosen that allows for easy translation
 between equation and algorithm.
 One of the most popular language options is C, or C++.
 C is a low level programming language that is known for its ability to
 provide execution speed and efficiency, especially for embedded systems
 where available resources are a large constraint.
 However, the cost of this is the knowledge and complexity which is required
 to encode algorithms.
 MATLAB is a high level programming language, sometimes called a 4th generation
 language.
 One of the main differences between MATLAB and C is the fact that MATLAB
 reads the source code line by line and interprets it into machine instructions
 on the fly, meaning no compilation is required.
 This results in decreased execution speed but has the major benefit of
 freeing the programmer from needing to worry about memory location and
 allows for dynamic typing 
\begin_inset CommandInset citation
LatexCommand cite
key "Fangohr2004"

\end_inset

.
 In short, MATLAB allows for algorithms to be encoded much quicker and with
 less lines of code then in C at the cost of execution speed 
\begin_inset CommandInset citation
LatexCommand cite
key "Prechelt2000"

\end_inset

.
 
\end_layout

\begin_layout Standard
INSERT EXAMPLE OF ALGORITHM IN C CODE VS ALGORITHM IN MATLAB CODE
\end_layout

\begin_layout Standard
Due to the time, visualizton, and performance benifits increasing academic
 instructures are looking to high level software tools to aid in the instruction
 of courses.
\begin_inset CommandInset citation
LatexCommand cite
key "Rossiter2010"

\end_inset

 proposes how MATLAB can be used as a simulation tool for classical control
 analysis/design and model predictive control.
 The paper discusses how when teaching controls the set of paper and pencil
 examples is quite limited as any non-trival system design and analysis
 will require fairly complex Bode and Nyquist plots, among other things,
 which can not be well represented by hand drawn sketches.
 MATLAB allows for the systems to be quickly coded and experimented with.
 Any experimentation done via paper and pencil could take minutes to fully
 compute, MATLAB instead takes seconds.
 In addition, it allows for concepts such as root-loci to be first attempted
 by hand then incrementally validated via MATLAB.
 This provides a level of interaction that is impossible in traditional
 settings as the student is able to actively reinforce their learning through
 simulation.
 Also, the time and coding knowledge required to code the solutions for
 the controls problems presented in the paper is minimum.
 The figure below shows how a system G(s) and controller K(s) can be quickly
 coded and simulated to examine steady state values.
 The speed and ease with which this can be accomplished makes it an invaluable
 tool to aid students in learning the finer points of concepts presented
 throughout the class.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Rossiter2010"

\end_inset

 (FIGURE LABEL/DESCRIPTION NEEDED)
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Figures/matlab_controls_eq_to_code.PNG
	lyxscale 80
	scale 70

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset citation
LatexCommand cite
key "Qian2014"

\end_inset

 illustrates the usefulness the robot operating system and the software
 Gazebo.
 The paper discusses how through the use of Gazebo and ROS a model of a
 robot arm manipulator was created and used for simulator.
 The simulator allowed for rapid testing of arm controllers in parallel
 with the construction of a physical arm for experimentation.
 However, due to the nature of how the controller was implemented it would
 not make a practical tool for education purposes.
 For one, the students would require an in depth knowledge of how Gazebo
 and ROS operates in order to make changes to the controller.
 The simulator that is being proposed for this research paper will seek
 to abstract this such that the student will be able to effectively modify
 the controller used with as minimum knowledge of outside simulation function
 as possible.
 
\end_layout

\begin_layout Standard
There are also quite a few papers and books in existence 
\begin_inset CommandInset citation
LatexCommand cite
key "Thrun2002,Corke2007,Corke2011"

\end_inset

that heavily delve into solutions to the SLAM problem.
 Many of these even productive in depth explanation into their algorithms
 making it easy to convert to code.
 However, there are very few that focus explicitly on creating a robust
 fully function system for the express purpose of developing and testing
 SLAM algorithms.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Thrun2002"

\end_inset

 provides an extremely good introduction to SLAM and a variety of algorithms
 used to solve the SLAM problem.
 The author even translates the mathematical formulation into code friendly
 algorithms.
 However, there is still the problem of implementing and simulation/testing
 these algorithms.
 While the algorithms are simply enough to follow and code, a simulation
 software still needs to exists if the results are to be observed in a meaningfu
l way to those just learning the topic.
 In a classroom setting creating such simulation software can easily become
 an inexcusable waste of time as there is just too much material to cover.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Corke2007,Corke2011"

\end_inset

 contain extremely good educational materials relating to MATLAB and its
 robotics capabilities, but again there remains the problem of beings able
 to create a software to be able to simulate and experiment with these algorithm
s in a timely and meaningful manner, beyond simply plotting results to a
 figure.
 
\end_layout

\begin_layout Section
Methodology
\end_layout

\begin_layout Standard
Create a collection of MATLAB classes that subscribe to ROS sensor topics
 to which the data generator(s) publish their measurements.
 Block diagram of the overall system.(GUIDE)
\end_layout

\begin_layout Standard
ROS has a distributed framework and is used widely in robotics.
 There are various advantages that are provided by ROS with the hardware
 abstraction that it offers and the code re-usability as we move form simulation
 environment to the actual implementation
\begin_inset CommandInset citation
LatexCommand cite
key "Qian2014"

\end_inset

.
 In addition there several compatible software packages such as gazebo that
 can provide a realistic dynamic simulation environment that a robot might
 encounter.
 The main intent behind used ROS is to implement pieces of software that
 can work in multiple robots by making little changes in the code 
\begin_inset CommandInset citation
LatexCommand cite
key "Temeltas2006"

\end_inset


\end_layout

\begin_layout Subsection
The Map
\end_layout

\begin_layout Standard
In simulation, MATLAB is used to construct a map whose geometry is known
 in both MATLAB and in the simulator, e.g., Gazebo.
 Gazebo is a slave to MATLAB for the purpose of creating the map.
 Here a MATLAB class is responsible for constructing the world by instantiating
 objects (in the form of 3D models) into the Gazebo world.
 These objects are also placed in a 3D world tracked by MATLAB.
 
\end_layout

\begin_layout Subsection
Data Flow
\end_layout

\begin_layout Standard
Give examples of how image data and scan data flow from the data generator
 to MATLAB.
 MATLAB takes in the data and generates observation measurements for the
 SLAM algorithm.
 The algorithm then takes these measurements in and updates/corrects the
 state which includes the robot's localized position and the MAP.
 
\end_layout

\begin_layout Standard
A key aspect of any simulator or experimentation software is data flow.
 In fact data flow is a critical issue for the SLAM simulator as it provides
 the link between any type of sensor measurement and controls.
 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Figures/Data Flow.png
	lyxscale 70
	scale 30

\end_inset


\end_layout

\begin_layout Subsubsection
2D Line Scanner example (EKF-SLAM)
\end_layout

\begin_layout Standard
Feature based mapping technique that allows for the use of planar surfaces
 such as walls, tables, counters, or other planar surfaces as landmarks.
 Surfaces are measured both in 3D point clouds, as well as 2D laser scans.
\end_layout

\begin_layout Standard
\begin_inset CommandInset citation
LatexCommand cite
key "Trevor2012"

\end_inset


\end_layout

\begin_layout Subsubsection
2D Image Sensor example (EKF-SLAM)
\end_layout

\begin_layout Standard
\begin_inset CommandInset citation
LatexCommand cite
key "Davison2007,Lee2013"

\end_inset


\end_layout

\begin_layout Subsubsection
RSSI Sensor exampleRange Only (EKF-RO-SLAM)
\end_layout

\begin_layout Section
Results
\end_layout

\begin_layout Standard
We first built the matlab code to establish and test the basic functionality
 required to implement SLAM algorithms.
 We then implemented the basic localization algorithm as mentioned [probabilisti
c robotics ] (INSERT FIGURE COMPARING EQ.
 TO MATLAB CODE) and counted the amount of lines of code required to implement
 just the basic localization when the landmarks are known and also the data
 required to implement them.
 We then proceeded to implement SLAM using RGB cameras and RO SLAM using
 radio beacons.
 This is representative of how most the SLAM algorithms share a similar
 core base code.
 In a educational setting these algorithms are to be taught with incremental
 progress ,i.e first by establishing basic core functionality and then implementi
ng an entire application.
 
\end_layout

\begin_layout Standard
As shown in figure we can see we added a comparably smaller amount of lines
 and did use a lot of the old code, pointing out the feature of re usability
 that can be used as most the individual applications of SLAM only vary
 in type of data and rate of data flow.
 The base core infrastructure and basic EKF localization took about 1665
 lines of code to implement.
 Table 1 indicates the additional number of lines required to implement
 various algorithms.
 As we can see we used majority of the same infrastructure in all the algorithms
 with a small addition of code for each application.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Algorithm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Additional Lines Of Code 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
EKF SLAM 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RO SLAM 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Collision Avoidance 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Datasets...
 perform simulation, run on real robot document # lines of code, document
 accuracy
\end_layout

\begin_layout Standard
document latency
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
State the contribution of the paper.
 Provide and overview of the important results discussed in the article.
 Address future work and/or shortcomings of the work in the current state.
 State how the results specifically support the claimed contribution.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "2018_IROS_MATLABandROS"
options "ieeetr"

\end_inset


\end_layout

\end_body
\end_document
